unit Unit2;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, IdBaseComponent, IdComponent, IdCustomTCPServer, IdCustomHTTPServer, IdHTTPServer,idContext,
  ExtCtrls, CPort,inifiles;

type
  TForm2 = class(TForm)
    IdHTTPServer1: TIdHTTPServer;
    Memo1: TMemo;
    Button1: TButton;
    ComPort: TComPort;
    ConnButton: TButton;
    PortButton: TButton;
    Panel1: TPanel;
    Image1: TImage;
    Button2: TButton;
    Timer1: TTimer;
    procedure IdHTTPServer1CommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo;
      AResponseInfo: TIdHTTPResponseInfo);
    procedure Button1Click(Sender: TObject);
    procedure ConnButtonClick(Sender: TObject);
    procedure PortButtonClick(Sender: TObject);
    procedure ComPortAfterClose(Sender: TObject);
    procedure ComPortAfterOpen(Sender: TObject);
    procedure ComPortRxChar(Sender: TObject; Count: Integer);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure Image1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure Image1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure Image1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure Button2Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    FInitFlag:Boolean;
    FIni:TMemIniFile;
    CanvasDraw : Boolean;
    LastX,LastY:integer;
    DeltaX,DeltaY:integer;
    CommandStr : String;
    xBuffer : integer;
    xBufferPos : integer;
    xArray : Array[1..10000] of string[25];
    isBusy : boolean;
    ArduinoStr : String;
  end;

var
  Form2: TForm2;

implementation

{$R *.dfm}

procedure TForm2.Button1Click(Sender: TObject);
begin
 if Button1.Caption = 'online' then
 begin
  IdHTTPServer1.Active := true;
  Button1.Caption := 'offline';
 end else
 if Button1.Caption = 'offline' then
 begin
  IdHTTPServer1.Active := true;
  Button1.Caption := 'online';
 end;
end;

procedure TForm2.Button2Click(Sender: TObject);
begin
 Image1.Canvas.Rectangle(0,0,Image1.Width,Image1.Height);
end;

procedure TForm2.ComPortAfterClose(Sender: TObject);
begin
  ConnButton.Caption := 'Connect';
end;

procedure TForm2.ComPortAfterOpen(Sender: TObject);
begin
  ConnButton.Caption := 'Disconnect';
end;

procedure TForm2.ComPortRxChar(Sender: TObject; Count: Integer);
var
 Str:String;
begin
 ComPort.ReadStr(Str, Count);
 if pos(chr(13),Str)<>0 then
 begin
  ArduinoStr := ArduinoStr+Str;
  memo1.text := memo1.text + 'Arduino:'+ArduinoStr;
  if pos('Z',ArduinoStr)<>0 then isBusy := False;
  ArduinoStr := '';

 end else
 begin
  ArduinoStr := ArduinoStr+Str;
 end;


end;

procedure TForm2.ConnButtonClick(Sender: TObject);
var
 i :integer;
begin
   xBuffer :=0;
   xBufferPos := 0;
   for i := 1 to 10000 do
    xArray[i] := '';
   isBusy := false;

  if ComPort.Connected then
    ComPort.Close
  else
    ComPort.Open;
end;

procedure TForm2.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   if Assigned(FIni) then
   begin
     FIni.WriteString('ComPort', 'ComPort', ComPort.Port );
     FIni.WriteString('ComPort','BaudRate', BaudRateToStr( ComPort.BaudRate ) );
     FIni.WriteString('ComPort','FlowControl', FlowControlToStr(ComPort.FlowControl.FlowControl ));
     FIni.UpdateFile;
     FIni.Free;
   end;
end;

procedure TForm2.FormCreate(Sender: TObject);
var
 i:integer;
begin
   xBuffer :=0;
   xBufferPos := 0;
   for i := 1 to 10000 do
    xArray[i] := '';
   isBusy := false;
end;

procedure TForm2.FormShow(Sender: TObject);
begin
 if not FInitFlag then begin
   FInitFlag := true;
   FIni := TMemIniFile.Create( ExtractFilePath(Application.ExeName)+'terminal.ini');
   ComPort.Port := FIni.ReadString('ComPort', 'ComPort',ComPort.Port);
   ComPort.BaudRate := StrToBaudRate( FIni.ReadString('ComPort','BaudRate', '19200'));
   ComPort.FlowControl.FlowControl := StrToFlowControl( FIni.ReadString('ComPort','FlowControl', 'Hardware'));
//   ConnButton.Click;
 end;
end;

procedure TForm2.IdHTTPServer1CommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo;
  AResponseInfo: TIdHTTPResponseInfo);
var
  I: Integer;
  RequestedDocument, FileName, CheckFileName: string;
begin
  // requested document
  RequestedDocument := ARequestInfo.Document;
  // log request
  memo1.lines.add('Client: ' + ARequestInfo.RemoteIP + ' request for: ' + RequestedDocument);

  // 001
  if Copy(RequestedDocument, 1, 1) <> '/' then
    // invalid request
    raise Exception.Create('invalid request: ' + RequestedDocument);

  // 002
  // convert all '/' to '\'
  FileName := RequestedDocument;
  I := Pos('/', FileName);
  while I > 0 do
  begin
    FileName[I] := '\';
    I := Pos('/', FileName);
  end;

  // locate requested file
  FileName := ExtractFilePath(Application.ExeName) + FileName;

  try
    CheckFileName := FileName;
    if FileExists(CheckFileName) then
    begin
      // return file as-is
      // log
      Memo1.Lines.Add('Returning Document: ' + CheckFileName);
      // open file stream
      AResponseInfo.ContentStream := TFileStream.Create(CheckFileName, fmOpenRead or fmShareCompat);
    end;
  finally
    if Assigned(AResponseInfo.ContentStream) then
    begin
      // response stream does exist
      // set length
      AResponseInfo.ContentLength := AResponseInfo.ContentStream.Size;
      // write header
      AResponseInfo.WriteHeader;
      // return content
      AResponseInfo.WriteContent;
      // free stream
      AResponseInfo.ContentStream.Free;
      AResponseInfo.ContentStream := nil;
    end else
    if AResponseInfo.ContentText <> '' then
    begin
      // set length
      AResponseInfo.ContentLength := Length(AResponseInfo.ContentText);
      // write header
      AResponseInfo.WriteHeader;
      // return content
    end else
    begin
     if not AResponseInfo.HeaderHasBeenWritten then
     begin
        // set error code
        AResponseInfo.ResponseNo := 404;
        AResponseInfo.ResponseText := 'Document not found';
        // write header
        AResponseInfo.WriteHeader;
     end;
     // return content
     AResponseInfo.ContentText := 'The document requested is not availabe.';
     AResponseInfo.WriteContent;
    end;
  end;
end;

procedure TForm2.Image1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
 if not CanvasDraw then
 begin
  Memo1.Lines.Add(inttostr(x)+';'+IntToStr(y));
  image1.Canvas.MoveTo(x,y);
  LastX := x;
  LastY := y;
 end;

 CanvasDraw := True;
end;

procedure TForm2.Image1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
 if canvasDraw then
 begin

  CommandStr:='';
  DeltaX := x-LastX;
  DeltaY := y-LastY;
  if (DeltaX<0) then CommandStr := CommandStr + chr(177)+chr(21)+chr(20+(DeltaX*(-1))) ;// '1;'+IntToStr(DeltaX*(-1))+';';
  if (DeltaX>0) then CommandStr := CommandStr + chr(177)+chr(22)+chr(20+(DeltaX*(1))) ;// '2;'+IntToStr(DeltaX)+';';

  if (DeltaY<0) then CommandStr := CommandStr + chr(177)+chr(23)+chr(20+(DeltaY*(-1)));// '3;'+IntToStr(DeltaY*(-1))+';';
  if (DeltaY>0) then CommandStr := CommandStr + chr(177)+chr(24)+chr(20+(DeltaY*(1)));// '4;'+IntToStr(DeltaY)+';';

  if (ComPort.Connected) then
  begin
   inc(xBuffer);
   if (xBuffer>10000) then xBuffer := 1;

   xArray[xBuffer] := CommandStr;
//   ComPort.WriteStr(CommandStr);
  end;

  Memo1.Lines.Add('delta:'+inttostr(DeltaX)+';'+IntToStr(DeltaY));
  Image1.Canvas.LineTo(x,y);

  LastX := x;
  LastY := y;

 end;
end;

procedure TForm2.Image1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
 CanvasDraw := False;
end;

procedure TForm2.PortButtonClick(Sender: TObject);
begin
  ComPort.ShowSetupDialog;
end;

procedure TForm2.Timer1Timer(Sender: TObject);
var
 i,j : integer;
 s : String;
begin
 if not isBusy then
 begin
  begin
   repeat
    inc(xBufferPos);
   until (xArray[xBufferPos]<>'') or (xBufferPos>10000);
   if (xBufferPos>10000) then xBufferPos := 1;

   if xArray[xBufferPos]<>'' then
   begin
    isBusy := TRUE;
    s := '';
    i := 0;
    repeat
     inc(i);
     if xArray[i]<>'' then
     begin
      s := s + xArray[i];
      xArray[i] := '';
     end;
    until (i>=10000) or (Length(s)>=55);
    xBufferPos := xBufferPos+i;
   if (xBufferPos>10000) then xBufferPos := 1;

    memo1.lines.Add('buffer: '+inttostr(length(s))+'        ('+inttostr(xBufferPos)+')');
    ComPort.WriteStr(s);
   end;
  end;
 end;

end;

end.
